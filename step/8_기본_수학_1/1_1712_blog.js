/*
손익분기점

문제
월드전자는 노트북을 제조하고 판매하는 회사이다. 노트북 판매 대수에 상관없이 매년 임대료, 재산세, 보험료, 급여 등 A만원의 고정 비용이 들며, 한 대의 노트북을 생산하는 데에는 재료비와 인건비 등 총 B만원의 가변 비용이 든다고 한다.

예를 들어 A=1,000, B=70이라고 하자. 이 경우 노트북을 한 대 생산하는 데는 총 1,070만원이 들며, 열 대 생산하는 데는 총 1,700만원이 든다.

노트북 가격이 C만원으로 책정되었다고 한다. 일반적으로 생산 대수를 늘려 가다 보면 어느 순간 총 수입(판매비용)이 총 비용(=고정비용+가변비용)보다 많아지게 된다. 최초로 총 수입이 총 비용보다 많아져 이익이 발생하는 지점을 손익분기점(BREAK-EVEN POINT)이라고 한다.

A, B, C가 주어졌을 때, 손익분기점을 구하는 프로그램을 작성하시오.

입력
첫째 줄에 A, B, C가 빈 칸을 사이에 두고 순서대로 주어진다. A, B, C는 21억 이하의 자연수이다.

출력
첫 번째 줄에 손익분기점 즉 최초로 이익이 발생하는 판매량을 출력한다. 손익분기점이 존재하지 않으면 -1을 출력한다.

예제 입력 1 
1000 70 170
예제 출력 1 
11
예제 입력 2 
3 2 1
예제 출력 2 
-1
예제 입력 3 
2100000000 9 10
예제 출력 3 
2100000001



+) 오류
출처 : https://www.acmicpc.net/board/view/77109

입력 : 1 1 2100000000
정답 : 1
출력 : 5


이러한 반례가 발생하게 된 이유는 바로 11번째 줄의 'parseInt' 에 있습니다!

질문자님께서는 손익분기점을 계산한 후 값을 버림하여 정수로 나타내기 위해 parseInt를 사용하신 것으로 보입니다. 하지만, parseInt는 본래 수를 버림한 값을 계산하기 위한 용도보다는 문자열을 정수로 변환하기 위한 용도로 사용합니다.

https://www.acmicpc.net/board/... 에 제가 다른 질문자님께 답변을 해드릴 때 값을 버림하기 위한 용도로 추천한 함수는 Math.floor() 입니다. Math.floor()는 인자로 들어간 값을 버림하여 정수 형태로 반환합니다. 만약 버림이 아닌 반올림과 올림을 원하실 경우 각각 Math.round() 와 Math.ceil() 을 사용하실 수 있습니다.

여기서 Math.floor() 를 사용하나 parseInt() 를 사용하나 버림한 값을 출력해 줄텐데 굳이 왜 Math.floor() 를 추천하는지, 둘 다 값을 버림했는데 왜 저런 반례가 생길지 의문이 드실 겁니다. 반례가 생기는 이유는, 바로 두 함수의 동작 방식이 달라서입니다.

앞서 말씀드렸다시피, parseInt()는 문자열을 정수로 변환(추출)하기 위한 용도로 사용합니다. 그렇기 때문에 parseInt()는 수를 버림하는 로직과는 작동 방식이 다릅니다.

parseInt에 들어간 입력값은 숫자 부분이 추출된 상태가 결과값으로 나옵니다.

● '123abc' 같이 숫자 뒤에 문자열이 섞인 값이 입력값으로 들어오면 123이 추출되어 123이 반환됩니다(NaN이 반환되지 않습니다).

● 1234.5678 같은 소수가 입력값으로 들어오면 '.' 이전의 정수 부분이 추출되어 1234가 반환됩니다(버림 효과를 냅니다).

이런 식으로 parseInt()는 정수를 추출하는 방법을 사용하기 때문에, 이 경우 의도와 다른 결과가 나올 수 있습니다.

● -1234.5678 이 입력값으로 주어질 경우 '.' 이전의 정수 부분인 -1234가 추출되어 -1234가 반환됩니다. 결과적으로 버림이 아닌 올림한 효과와 같습니다.

● 0.00000000000003 같은 자릿수가 너무 높은 값이 입력값으로 주어질 경우 의도했던 0과 달리 3이 반환됩니다. 왜냐하면 위 수는 실제로 3e-14(3에 10의 -14승을 곱한 값) 로 간주되고, 그에 따라 맨 앞의 정수값인 '3' 이 추출되기 때문입니다. (틀린 이유)

이러한 문제점이 있기 때문에 값을 버림/올림/반올림 하는 등의 연산을 하고 싶으신 경우에는 parseInt() 를 추천하지 않습니다.

값을 버림하기 위한 용도일 경우에는 Math.floor() 를 사용해 주시고, 정수를 문자열로 변환하고 싶을 때는 parseInt() 를 적극 사용해 주세요!

result = Math.floor(input[0]/(input[2]-input[1]))+1


*/

const fs = require("fs");
const input = fs
  .readFileSync("/dev/stdin")
  .toString()
  .trim()
  .split(" ")
  .map((e) => +e);

const [A, B, C] = input;
let result = 0;

if (B >= C) result = -1;
else {
  // while (!(A + B * result < C * result)) result++
  result = Math.floor(A / (C - B)) + 1;
}

console.log(result);
